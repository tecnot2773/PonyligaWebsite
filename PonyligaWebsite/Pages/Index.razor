@page "/"

@using PonyligaWebsite.Models
@using System.Threading;
@inject Services.IApiClient apiclient


<h1>Gesamtergebnisse</h1>

<p>Ergebnisse vom allen Spielen:</p>

@if (IsLoading)
{
	<p><em>Lade Ergebnisse...</em></p>
}
else if (!string.IsNullOrEmpty(Error) || data == null)
{
	<p class="alert alert-danger">
	 Fehler beim Laden: @Error
	</p>
}
else
{
	<p>
	 <button class="btn btn-primary" @onclick="RefreshData">
	  Neuladen
	 </button>
		@lastRefresh.ToString("dd.MM.yyyy HH:mm:ss")
	</p>
	<table class="table">
	 <thead>
	  <tr>
	   <th>Platzierung</th>
	   <th>Team</th>
	   <th>Punkte</th>

	  </tr>
	 </thead>
	 <tbody>

			@foreach (var team in data)
			{												

						<tr>
						<td>@team.place</td>
						<td>@team.name</td>
						<td>@team.totalScore.ToString()</td>
	
					</tr>
					

			}


		 

	 </tbody>
	</table>
}

@code {
	private bool IsLoading = false;
	private Team[] data;
	private DateTime lastRefresh;
	private string Error = null;

	protected override async Task OnInitializedAsync()
	{
		await RefreshData();
	}

	async Task RefreshData()
	{
		try
		{
			IsLoading = true;
			Error = null;
			data = await apiclient.GetResultSummary();
			lastRefresh = DateTime.Now;
			await InvokeAsync(() =>
			{
				StateHasChanged();
			});
		}
		catch (Exception ex)
		{
			Error = ex.ToString();
		}
		finally
		{
			IsLoading = false;
		}
	}



}